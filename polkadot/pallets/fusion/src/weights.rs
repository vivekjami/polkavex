//! Autogenerated weights for pallet_fusion
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0
//! DATE: 2024-01-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `polkavex-benchmarking`, CPU: `<CPU_NAME>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

use frame_support::{
    traits::Get,
    weights::{Weight, constants::RocksDbWeight},
};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_fusion`.
pub trait WeightInfo {
    fn create_escrow() -> Weight;
    fn fund_escrow() -> Weight;
    fn complete_escrow() -> Weight;
    fn cancel_escrow() -> Weight;
    fn emergency_pause() -> Weight;
    fn emergency_unpause() -> Weight;
}

/// Weights for pallet_fusion using the Substrate reference hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// Storage: FusionEscrow Escrows (r:1 w:1)
    /// Storage: FusionEscrow NextEscrowId (r:1 w:1)
    /// Storage: FusionEscrow AccountEscrows (r:1 w:1)
    /// Storage: FusionEscrow EscrowStats (r:1 w:1)
    /// Proof: FusionEscrow Escrows (max_values: None, max_size: Some(1024), added: 3499, mode: MaxEncodedLen)
    /// Proof: FusionEscrow NextEscrowId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Proof: FusionEscrow AccountEscrows (max_values: None, max_size: Some(8004), added: 10479, mode: MaxEncodedLen)
    /// Proof: FusionEscrow EscrowStats (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    /// Storage: FusionEscrow EscrowsByTaker (r:1 w:1)
    fn create_escrow() -> Weight {
        Weight::from_parts(50_000_000, 0)
            .saturating_add(RocksDbWeight::get().reads(4))
            .saturating_add(RocksDbWeight::get().writes(5))
    }

    /// Storage: FusionEscrow Escrows (r:1 w:1)
    /// Storage: Assets Account (r:2 w:2)
    /// Storage: System Account (r:1 w:1)
    fn fund_escrow() -> Weight {
        Weight::from_parts(40_000_000, 0)
            .saturating_add(RocksDbWeight::get().reads(4))
            .saturating_add(RocksDbWeight::get().writes(4))
    }

    /// Storage: FusionEscrow Escrows (r:1 w:1)
    /// Storage: Assets Account (r:2 w:2)
    /// Storage: System Account (r:1 w:1)
    fn complete_escrow() -> Weight {
        Weight::from_parts(45_000_000, 0)
            .saturating_add(RocksDbWeight::get().reads(4))
            .saturating_add(RocksDbWeight::get().writes(4))
    }

    fn cancel_escrow() -> Weight {
        Weight::from_parts(40_000_000, 0)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(4))
    }

    /// Storage: FusionEscrow EmergencyPaused (r:0 w:1)
    fn emergency_pause() -> Weight {
        Weight::from_parts(25_000_000, 0)
            .saturating_add(T::DbWeight::get().writes(1))
    }

    /// Storage: FusionEscrow EmergencyPaused (r:0 w:1)
    fn emergency_unpause() -> Weight {
        Weight::from_parts(25_000_000, 0)
            .saturating_add(T::DbWeight::get().writes(1))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn create_escrow() -> Weight {
        Weight::from_parts(50_000_000, 0)
            .saturating_add(RocksDbWeight::get().reads(4))
            .saturating_add(RocksDbWeight::get().writes(4))
    }

    fn fund_escrow() -> Weight {
        Weight::from_parts(75_000_000, 0)
            .saturating_add(RocksDbWeight::get().reads(4))
            .saturating_add(RocksDbWeight::get().writes(3))
    }

    fn complete_escrow() -> Weight {
        Weight::from_parts(85_000_000, 0)
            .saturating_add(RocksDbWeight::get().reads(4))
            .saturating_add(RocksDbWeight::get().writes(3))
    }

    fn cancel_escrow() -> Weight {
        Weight::from_parts(70_000_000, 0)
            .saturating_add(RocksDbWeight::get().reads(4))
            .saturating_add(RocksDbWeight::get().writes(3))
    }

    fn emergency_pause() -> Weight {
        Weight::from_parts(25_000_000, 0)
            .saturating_add(RocksDbWeight::get().writes(1))
    }

    fn emergency_unpause() -> Weight {
        Weight::from_parts(25_000_000, 0)
            .saturating_add(RocksDbWeight::get().writes(1))
    }
}
